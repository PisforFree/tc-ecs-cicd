name: CI - Test, Scan, Build & Push

on:
  pull_request:
  push:

permissions:
  id-token: write         # for OIDC -> AWS
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPO:   ${{ vars.ECR_REPO }}
  IMAGE_LOCAL: tc-ecs-api:ci

jobs:
  build-test-scan-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install deps & run tests
        working-directory: app
        run: |
          npm ci
          npm test

      - name: Build Docker image (local)
        working-directory: app
        run: docker build -t "$IMAGE_LOCAL" .

      - name: Trivy scan (filesystem)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: app
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          exit-code: '1'

      - name: Trivy scan (image)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: ${{ env.IMAGE_LOCAL }}
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          exit-code: '1'

      # Push only on main
      - name: Configure AWS credentials (OIDC)
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        if: github.ref == 'refs/heads/main'
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag & push to ECR
        if: github.ref == 'refs/heads/main'
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
          SHA_TAG: sha-${{ github.sha }}
        run: |
          set -e
          IMAGE_URI="$REGISTRY/$ECR_REPO"
          # tag
          docker tag "$IMAGE_LOCAL" "$IMAGE_URI:$SHA_TAG"
          docker tag "$IMAGE_LOCAL" "$IMAGE_URI:main-latest"
          # push
          docker push "$IMAGE_URI:$SHA_TAG"
          docker push "$IMAGE_URI:main-latest"
          echo "image_uri_sha=$IMAGE_URI:$SHA_TAG" >> $GITHUB_OUTPUT
